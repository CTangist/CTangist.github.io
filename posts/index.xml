<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on CTANGBLOG</title>
    <link>https://CTangist.github.io/posts/</link>
    <description>Recent content in Posts on CTANGBLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 25 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://CTangist.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What is KMP--Guided by LeetCode-Q28-strStr[Easy]</title>
      <link>https://CTangist.github.io/posts/kmpnote/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/posts/kmpnote/</guid>
      <description>Items Link to heading 1. Guiding Question 1.1 Example1 1.2 Example2 1.3 Constraints 2. Analysis 2.1 $Brute$-$Force$ 2.2 How to Optimize $Brute$-$Force$ 2.3 Array &amp;ldquo;next&amp;rdquo; 3. KMP Code 3.1 How to Build Array &amp;ldquo;next&amp;rdquo; 3.2 Match with Array &amp;ldquo;next&amp;rdquo; REFERENCES 1. Guiding Question Link to heading Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</description>
    </item>
    
    <item>
      <title>Astronomy Tips</title>
      <link>https://CTangist.github.io/posts/astronomy-today-tips/</link>
      <pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/posts/astronomy-today-tips/</guid>
      <description>Astronomic Observation Link to heading 天文学家在工作中会使用许多不同的单位制，同时，为了方便他们还经常引入新的单位。例如，当讨论恒星时，太阳的质量和半径通常被用作参考单位。太阳质量，写作 $M_{\odot}$，等于 $2.0\times10^{33}\text{g}$ 或 $2.0\times10^{30}\text{kg}$。太阳半径写作 $R_{\odot}$，等于 $700,000\text{km}$ 或 $7.0\times10^8\text{m}$，下标 $\odot$ 代表太阳。同样地，下标 $\oplus$ 代表地球。
其中，特别重要的是天文学家所使用的长度单位。在小尺度上。使用埃（$1\text{\AA} = 10^{-10}\text{m}= 10^{-8}\text{cm}$）、纳米（$1\text{nm}=10^{-9}\text{m}=10^{-7}\text{cm}$）和微米（$1\mu\text{m}=10^{-6}\text{m}=10^{-4}\text{cm}$）。表示太阳系内的距离单位通常使用天文单位（$\text{AU}$），即地球和太阳之间的平均距离，一个天文单位约等于 $150,000,000\text{km}$ 或 $1.5\times10^{11}\text{m}$。在更大尺度上，通常使用光年（$1\text{ly}=9.5\times10^{15}\text{m}=9.5\times10^{12}\text{km}$）和秒差距（$1\text{pc}=3.1\times10^{16}\text{m}=3.1\times10^{13}\text{km}=3.3\text{ly}$）。再大的距离使用公制的常规前缀：千表示一千，兆表示百万。因此 $1$ 千秒差距（$\text{kpc}$）$=10^3\text{pc}=3.1\times10^{19}$ 米，$10$ 兆秒差距（$\text{Mpc}$）$=10^7\text{pc}=3.1\times10^{23}$ 米，等等。
天文学家在特定情况下会使用特定的单位，随着情况的变化，单位也随之变化。例如，测量密度时，我们可能用每立方厘米体积内的克数（$\text{g/cm}^3$），每立方米内的原子数目（原子数 $\text{/m}^3$），甚至是每立方百万秒差距中以太阳质量为单位的密度（$M_{\odot}\text{/Mpc}^3$），这都需要根据情况而定。最重要的是，一旦掌握了单位制，我们就可以轻松地从一组单位制转换到另一组单位制。天文学中一些比较常见的单位以及它们最有可能使用的情况在下表中列出。
长度（Length） 使用场景 $1$ 埃（$\text{\AA}$）$=10^{-10}\text{m}$ 原子物理，光谱学 $1$ 纳米（$\text{nm}$）$=10^{-9}\text{m}$ 星际尘埃和气体 $1$ 微米（$\mu\text{m}$）$=10^{-6}\text{m}$ $1$ 厘米（$\text{cm}$）$=0.01\text{m}$ $1$ 米（$\text{m}$）$=100\text{cm}$ 在天文学领域内广泛使用 $1$ 千米（$\text{km}$）$=1000\text{m}=10^5\text{cm}$ 地球半径（$R_{\oplus}$）$=6378\text{km}$ 星星天文学 太阳半径（$R_{\odot}$）$=6.96\times10^8\text{m}$ $1$ 天文单位（$\text{AU}$）$=1.496\times10^{11}\text{m}$ 太阳系，恒星演化 $1$ 光年（$\text{ly}$）$=9.46\times19^{15}\text{m}=63,200\text{AU}$ $1$ 秒差距（$\text{pc}$）$=3.09\times10^{16}\text{m}=206,000\text{AU}=3.26\text{ly}$ 星系天文学，恒星和星团 $1$ 千秒差距（$\text{kpc}$）$=1000\text{pc}$ $1$ 兆秒差距（$\text{Mpc}$）$=1000\text{kpc}$ 星系，星系团，宇宙学 质量（Mass） 使用场景 $1$ 克（$\text{g}$） $1$ 千克（$\text{kg}$）$=1000\text{g}$ 在许多不同领域内广泛使用 地球质量（$M_{\oplus}$）$=5.</description>
    </item>
    
    <item>
      <title>LeetCode-Q25-reverseKGroup[Hard]</title>
      <link>https://CTangist.github.io/posts/leetcode-q25-reversekgrouphard/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/posts/leetcode-q25-reversekgrouphard/</guid>
      <description>Items Link to heading Problem-Description Example Constraints Solution Problem Description Link to heading Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.</description>
    </item>
    
    <item>
      <title>LeetCode-Q18-4Sum[Medium]</title>
      <link>https://CTangist.github.io/posts/leetcode-q18-4summedium/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/posts/leetcode-q18-4summedium/</guid>
      <description>Items Link to heading Problem-Description Example Constraints Solution Problem Description Link to heading Give an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 &amp;lt;= a, b, c, d &amp;lt; n a, b, c, and d are distinct. nums[a] + nums[b] + nums[c] + nums[d] == target You may return the answer in any order.
Example Link to heading Example 1: Link to heading 1 2 Input: nums = [1,0,-1,0,-2,2], target = 0 Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]] Example 2: Link to heading 1 2 Input: nums = [2,2,2,2,2], target = 8 Output: [[2,2,2,2]] Constraints: Link to heading 1 &amp;lt;= nums.</description>
    </item>
    
    <item>
      <title>What is NumPy</title>
      <link>https://CTangist.github.io/posts/numpynote/</link>
      <pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/posts/numpynote/</guid>
      <description>Items Link to heading INTRODUCTION ADVANTAGE WHY NumPy FASTER REFERENCES INTRODUCTION Link to heading NumPy (Numerical Python) 是 Python 科学计算的基础包。它是一个 Python 库，提供了一个多维数组对象、各种派生对象（例如掩码数组和矩阵），以及用于对数组进行快速操作的各种例程，包括数学、逻辑、形状操作、排序、选择、I/O、离散傅立叶变换、基本线性代数、基本统计运算、随机模拟等等。
ADVANTAGE Link to heading NumPy 的核心是 ndarray 对象。其封装了同构数据类型的 n 维数组，许多操作在编译代码中执行以提高性能。NumPy 数组和标准 Python 序列之间有几个重要的区别：
与 Python 列表（可以动态增长）不同，NumPy 数组在创建时具有固定大小。更改 ndarray 的大小将创建一个新数组并删除原始数组； NumPy 数组中的元素都需要具有相同的数据类型，因此在内存中的大小相同。例外：可以有（Python，包括 NumPy）对象的数组，从而允许不同大小元素的数组； NumPy 数组有助于对大量数据进行高级数学运算和其他类型的运算。通常，与使用 Python 的内置序列相比，此类操作的执行效率更高，代码更少。 [ EXAMPLE ] Link to heading 大数据时代的来临，使我们在构造模型时必须高度注意算法/程序的内存使用以及算力开销。毋庸置疑，大量的第三方库以及简洁的语法是 Python 的优势，但运行速度绝对是它不可否认的短板。
高级语言是为了方便用户编程而诞生的程序设计语言，计算机是无法直接执行程序指令的，它们需要先被编译为机器语言（0/1代码）才能交给计算机执行。
Python 作为解释语言，需要解释器逐条解释（词法分析 $\rightarrow$ 语法分析 $\rightarrow$ 语义分析）执行； 而 C++ 是典型的编译语言，编译器读取源代码，再输出可执行代码：编译器前端（词法分析 $\rightarrow$ 语法分析 $\rightarrow$ 语义分析 $\rightarrow$ 中间代码生成）$\rightarrow$ 编译器后端（代码优化 $\rightarrow$ 目标代码生成），执行时不再需要编译器，直接在支持目标代码的平台上运行，因此执行效率比解释执行快很多。 这里我们来看一个简单的编程实例：考虑将一维序列中的每个元素，与另一个相同长度序列中的相应元素相乘的情况。如果数据存储在两个 Python 列表 a 和 b 中，我们可以遍历列表完成元素相乘：</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTANGBLOG</title>
    <link>https://CTangist.github.io/</link>
    <description>Recent content on CTANGBLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 08 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://CTangist.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode-Q18-4Sum[Medium]</title>
      <link>https://CTangist.github.io/posts/leetcode-q18-4summedium/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/posts/leetcode-q18-4summedium/</guid>
      <description>Problem Description Link to heading Give an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 &amp;lt;= a, b, c, d &amp;lt; n a, b, c, and d are distinct. nums[a] + nums[b] + nums[c] + nums[d] == target You may return the answer in any order.
Example Link to heading Example 1: Link to heading 1 2 Input: nums = [1,0,-1,0,-2,2], target = 0 Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]] Example 2: Link to heading 1 2 Input: nums = [2,2,2,2,2], target = 8 Output: [[2,2,2,2]] Constraints: Link to heading 1 &amp;lt;= nums.</description>
    </item>
    
    <item>
      <title>What is NumPy</title>
      <link>https://CTangist.github.io/posts/numpynote/</link>
      <pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/posts/numpynote/</guid>
      <description>INTRODUCTION Link to heading NumPy (Numerical Python) 是 Python 科学计算的基础包。它是一个 Python 库，提供了一个多维数组对象、各种派生对象（例如掩码数组和矩阵），以及用于对数组进行快速操作的各种例程，包括数学、逻辑、形状操作、排序、选择、I/O、离散傅立叶变换、基本线性代数、基本统计运算、随机模拟等等。
ADVANTAGE Link to heading NumPy 的核心是 ndarray 对象。其封装了同构数据类型的 n 维数组，许多操作在编译代码中执行以提高性能。NumPy 数组和标准 Python 序列之间有几个重要的区别：
与 Python 列表（可以动态增长）不同，NumPy 数组在创建时具有固定大小。更改 ndarray 的大小将创建一个新数组并删除原始数组； NumPy 数组中的元素都需要具有相同的数据类型，因此在内存中的大小相同。例外：可以有（Python，包括 NumPy）对象的数组，从而允许不同大小元素的数组； NumPy 数组有助于对大量数据进行高级数学运算和其他类型的运算。通常，与使用 Python 的内置序列相比，此类操作的执行效率更高，代码更少。 [ EXAMPLE ] Link to heading 大数据时代的来临，使我们在构造模型时必须高度注意算法/程序的内存使用以及算力开销。毋庸置疑，大量的第三方库以及简洁的语法是 Python 的优势，但运行速度绝对是它不可否认的短板。
高级语言是为了方便用户编程而诞生的程序设计语言，计算机是无法直接执行程序指令的，它们需要先被编译为机器语言（0/1代码）才能交给计算机执行。
Python 作为解释语言，需要解释器逐条解释（词法分析 $\rightarrow$ 语法分析 $\rightarrow$ 语义分析）执行； 而 C++ 是典型的编译语言，编译器读取源代码，再输出可执行代码：编译器前端（词法分析 $\rightarrow$ 语法分析 $\rightarrow$ 语义分析 $\rightarrow$ 中间代码生成）$\rightarrow$ 编译器后端（代码优化 $\rightarrow$ 目标代码生成），执行时不再需要编译器，直接在支持目标代码的平台上运行，因此执行效率比解释执行快很多。 这里我们来看一个简单的编程实例：考虑将一维序列中的每个元素，与另一个相同长度序列中的相应元素相乘的情况。如果数据存储在两个 Python 列表 a 和 b 中，我们可以遍历列表完成元素相乘：</description>
    </item>
    
    <item>
      <title>temas</title>
      <link>https://CTangist.github.io/categoria/temas/</link>
      <pubDate>Wed, 04 Jan 2023 23:21:18 +0100</pubDate>
      
      <guid>https://CTangist.github.io/categoria/temas/</guid>
      <description></description>
    </item>
    
    <item>
      <title>sintaxe</title>
      <link>https://CTangist.github.io/categoria/sintaxe/</link>
      <pubDate>Wed, 04 Jan 2023 23:21:06 +0100</pubDate>
      
      <guid>https://CTangist.github.io/categoria/sintaxe/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Códigos curtos</title>
      <link>https://CTangist.github.io/tags/shortcodes/</link>
      <pubDate>Wed, 04 Jan 2023 11:51:36 +0100</pubDate>
      
      <guid>https://CTangist.github.io/tags/shortcodes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mermaid JS support</title>
      <link>https://CTangist.github.io/examples/mermaid-support/</link>
      <pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/examples/mermaid-support/</guid>
      <description>If you want to use Mermaid-JS on your website. Provide mermaid as Shortcode in your markdown file.
flowchart LR A --&gt; B B --&gt; C C --&gt; D D --&gt; B sequenceDiagram participant Alice participant Bob Alice-&gt;&gt;Bob: Hi Bob Bob-&gt;&gt;Alice: Hi Alice Find more example on Mermaid-JS website.</description>
    </item>
    
    <item>
      <title>HTML and CSS only tabs</title>
      <link>https://CTangist.github.io/examples/html-and-css-only-tabs/</link>
      <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/examples/html-and-css-only-tabs/</guid>
      <description>Basic shortcodes Link to heading The following content:
1 2 3 4 5 6 7 8 9 {{&amp;lt; tabgroup &amp;gt;}} {{&amp;lt; tab name=&amp;#34;Hello&amp;#34; &amp;gt;}} Hello World! {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab name=&amp;#34;Goodbye&amp;#34; &amp;gt;}} Goodbye Everybody! {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabgroup &amp;gt;}} Will generate:
Hello Hello World! Goodbye Goodbye Everybody! Right alighment Link to heading You can also align the tabs to the right:
1 2 3 4 5 6 7 8 9 {{&amp;lt; tabgroup align=&amp;#34;right&amp;#34; &amp;gt;}} {{&amp;lt; tab name=&amp;#34;Hello&amp;#34; &amp;gt;}} Hello World!</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://CTangist.github.io/examples/markdown-syntax/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/examples/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>https://CTangist.github.io/examples/placeholder-text/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/examples/placeholder-text/</guid>
      <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>https://CTangist.github.io/examples/math-typesetting/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/examples/math-typesetting/</guid>
      <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://CTangist.github.io/examples/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/examples/emoji-support/</guid>
      <description>&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>External Page: Hugo Coder Wiki</title>
      <link>https://CTangist.github.io/examples/hugo-coder-wiki/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/examples/hugo-coder-wiki/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://CTangist.github.io/blogsource/01-whatisnumpy/numpynote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/blogsource/01-whatisnumpy/numpynote/</guid>
      <description>What is NumPy Link to heading NumPy (Numerical Python) 是 Python 科学计算的基础包。它是一个 Python 库，提供了一个多维数组对象、各种派生对象（例如掩码数组和矩阵），以及用于对数组进行快速操作的各种例程，包括数学、逻辑、形状操作、排序、选择、I/O、离散傅立叶变换、基本线性代数、基本统计运算、随机模拟等等。
ADVANTAGE Link to heading NumPy 的核心是 ndarray 对象。其封装了同构数据类型的 n 维数组，许多操作在编译代码中执行以提高性能。NumPy 数组和标准 Python 序列之间有几个重要的区别：
与 Python 列表（可以动态增长）不同，NumPy 数组在创建时具有固定大小。更改 ndarray 的大小将创建一个新数组并删除原始数组； NumPy 数组中的元素都需要具有相同的数据类型，因此在内存中的大小相同。例外：可以有（Python，包括 NumPy）对象的数组，从而允许不同大小元素的数组； NumPy 数组有助于对大量数据进行高级数学运算和其他类型的运算。通常，与使用 Python 的内置序列相比，此类操作的执行效率更高，代码更少。 [ EXAMPLE ] Link to heading 大数据时代的来临，使我们在构造模型时必须高度注意算法/程序的内存使用以及算力开销。毋庸置疑，大量的第三方库以及简洁的语法是 Python 的优势，但运行速度绝对是它不可否认的短板。
高级语言是为了方便用户编程而诞生的程序设计语言，计算机是无法直接执行程序指令的，它们需要先被编译为机器语言（0/1代码）才能交给计算机执行。
Python 作为解释语言，需要解释器逐条解释（词法分析 $\rightarrow$ 语法分析 $\rightarrow$ 语义分析）执行； 而 C++ 是典型的编译语言，编译器读取源代码，再输出可执行代码：编译器前端（词法分析 $\rightarrow$ 语法分析 $\rightarrow$ 语义分析 $\rightarrow$ 中间代码生成）$\rightarrow$ 编译器后端（代码优化 $\rightarrow$ 目标代码生成），执行时不再需要编译器，直接在支持目标代码的平台上运行，因此执行效率比解释执行快很多。 这里我们来看一个简单的编程实例：考虑将一维序列中的每个元素，与另一个相同长度序列中的相应元素相乘的情况。如果数据存储在两个 Python 列表 a 和 b 中，我们可以遍历列表完成元素相乘：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://CTangist.github.io/blogsource/02-leetcode-4summedium/leetcode-4summedium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/blogsource/02-leetcode-4summedium/leetcode-4summedium/</guid>
      <description>Problem Description Link to heading Give an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 &amp;lt;= a, b, c, d &amp;lt; n a, b, c, and d are distinct. nums[a] + nums[b] + nums[c] + nums[d] == target You may return the answer in any order.
Example Link to heading Example 1: Link to heading 1 2 Input: nums = [1,0,-1,0,-2,2], target = 0 Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]] Example 2: Link to heading 1 2 Input: nums = [2,2,2,2,2], target = 8 Output: [[2,2,2,2]] Constraints: Link to heading 1 &amp;lt;= nums.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://CTangist.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/about/</guid>
      <description>Nothing to see here&amp;hellip; Move along!</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://CTangist.github.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/contact/</guid>
      <description>CTangCSE@163.com</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://CTangist.github.io/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://CTangist.github.io/projects/</guid>
      <description>Nothing to see here&amp;hellip; Move along!</description>
    </item>
    
  </channel>
</rss>
